@page "/"
@using BlazorApp1.Models;
@rendermode InteractiveServer
@using CsvHelper;
@using System.Globalization;
@using System.Text;
@using FuzzySharp;
<PageTitle>Home</PageTitle>

<div class="frame mainBoard">
    <!-- frame: Board -->
    <div class="frame header">

        <!-- Row mode -->
        <div class="headerButton headerButtonRowMode">
            <div class="shape rect headerDividerBar" style="background: #30D34F;">
            </div>
            <p>Row Mode</p>
        </div>
        
    </div>
    <!-- frame: Board -->
    <div tabindex="0" @onkeypress="recalculateBlockList" @ref="pageCarrousel" style="z-index: 2;">
        <RandomCarrousell BlockList="blockList">
            <PercentageView BlockList="randomMachine.returnBlocks()" OnClickCallback="(clickedBlock)=>{randomMachine.removeBlock(clickedBlock); recalculateBlockList(); }" />
        </RandomCarrousell>
    </div>
    <!-- frame: Menu picker -->
    <div class="frame BlockSelector" style="z-index:0;">
        <!-- rect: Rectangle -->
        <div class="shape rect searchMenuHeader">
            <p style="height: 63px; color: rgba(237, 229, 226, 1); font-size: 52px;">All Blocks</p>
            <div style="display: flex;align-items: center;">
                <span class="material-symbols-outlined" style="color:rgba(237, 229, 226, 1); font-size:35px;">search</span>
                <input class="filterBar">
            </div>

        </div>
        <!-- frame: Board -->
        <div class="frame blockList">
            
            @foreach (var data in availableBlocks) {
                <MenuItem BlockName="@data.file_name" ImageString="@createImage(data.image_base64)" OnClickCallback="(e=>{randomMachine.addBlock(data); recalculateBlockList(); })" />
            }

        </div>
    </div>

</div>

@code {

    private IEnumerable<Blocks>? availableBlocks { get; set; }
    private IEnumerable<Blocks>? allBlocks { get; set; }
    private RandomMachine randomMachine = new RandomMachine();
    private List<Blocks>? blockList = new List<Blocks>();
    private ElementReference pageCarrousel;
    private string pressedKey;
    private string currentSearch;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await pageCarrousel.FocusAsync();
        }
    }
    protected override void OnInitialized() {
        using (var reader = new StreamReader("blocks.csv"))
        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture)) {
            allBlocks = csv.GetRecords<Blocks>().ToList();
            availableBlocks = allBlocks;
        }
    }



    String createImage(String inputBase64) {
        return "url(data:image/png;base64," + inputBase64+")";
    }
    void recalculateBlockList() {
        blockList.Clear();
        for(int i = 0; i < 10; i++) {
            RandomBlocks? selectedBlock = randomMachine.selectRandomBlock();
            if(selectedBlock != null) {
                blockList.Add(selectedBlock.internalBlock);
            }
        }
    }

    void blockSearchFieldEvent(string value) {
        currentSearch = value;
        searchForBlock(value);
        
    }
    void searchForBlock(string blockQuery) {
        if (blockQuery.Length == 0) {
            availableBlocks = allBlocks;
            return;
        }
        List<String> blockNames = allBlocks.Select(block => block.file_name).ToList();
        var results = Process.ExtractSorted(blockQuery, blockNames, null, null, 50);
        List<String> resultNames = results.Select(b => b.Value).ToList();
        List<Blocks> resultBlocks = new List<Blocks>(); 
        foreach(var result in resultNames) {
            resultBlocks.Add(allBlocks.Single(obj => obj.file_name == result));
        }
        availableBlocks = resultBlocks;

    }
}
