@page "/"
@using BlazorApp1.Models;
@rendermode InteractiveServer
@using CsvHelper;
@using System.Globalization;
@using System.Text;
<PageTitle>Home</PageTitle>

<div class="frame mainBoard">
    <!-- frame: Board -->
    <div class="frame header">

        <!-- Row mode -->
        <div class="headerButton headerButtonRowMode">
            <div class="shape rect headerDividerBar" style="background: #30D34F;">
            </div>
            <p>Row Mode</p>
        </div>

        <!-- Grid mode -->
        <div class="headerButton" style="color: #646464;">
            <div class="shape rect headerDividerBar" style="background: #646464;">
            </div>
            <p>Grid Mode</p>
        </div>
        
    </div>
    <!-- frame: Board -->
    <div tabindex="0" @onkeypress="advanceCarrousel" @ref="pageCarrousel" style="z-index: 2;">
        <RandomCarrousell blockToPlace="blocksToPlace" blockPlaced="placedBlocks">
            <PercentageView BlockList="randomMachine.returnBlocks()" />
        </RandomCarrousell>
    </div>
    <!-- frame: Menu picker -->
    <div class="frame BlockSelector" style="z-index:0;">
        <!-- rect: Rectangle -->
        <div class="shape rect searchMenuHeader">
            <div class="shape text all-blocks-8843f1f0b165">
                <div class="text-node-html" id="html-text-node-d2950523-f033-80ea-8004-8843f1f0b165" data-x="2006" data-y="552">
                    <div class="root rich-text root-0" style="display:flex;white-space:break-spaces;align-items:flex-start" xmlns="http://www.w3.org/1999/xhtml">
                        <div class="paragraph-set root-0-paragraph-set-0">
                            <p class="paragraph root-0-paragraph-set-0-paragraph-0" dir="auto"><span class="text-node root-0-paragraph-set-0-paragraph-0-text-0" style="color:rgba(237, 229, 226, 1);text-transform:none;line-break:auto;overflow-wrap:initial;white-space:pre;text-rendering:geometricPrecision;caret-color:rgba(237, 229, 226, 1);text-decoration:none;--font-id:gfont-noto-sans;--fills:[[&quot;^ &quot;,&quot;~:fill-color&quot;,&quot;#ede5e2&quot;,&quot;~:fill-opacity&quot;,1]];letter-spacing:0px;font-size:52px;font-family:&quot;Noto Sans&quot;;font-style:normal;font-weight:400">All blocks</span></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="shape rect filterBar">
            </div>
        </div>
        <!-- frame: Board -->
        <div class="frame blockList">
            @foreach (var data in dataSource) {

                <MenuItem BlockName="@data.file_name" ImageString="@createImage(data.image_base64)" OnClickCallback="(e=>{randomMachine.addBlock(data); recalculateBlockList(); })" />
            }

        </div>
    </div>

</div>

@code {

    private IEnumerable<Blocks>? dataSource { get; set; }
    private RandomMachine randomMachine = new RandomMachine();
    private List<Blocks>? blocksToPlace = new List<Blocks>();
    private List<Blocks>? placedBlocks = new List<Blocks>();
    private ElementReference pageCarrousel;
    private string pressedKey;


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await pageCarrousel.FocusAsync();
        }
    }
    protected override void OnInitialized() {
        using (var reader = new StreamReader("blocks.csv"))
        using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture)) {
            dataSource = csv.GetRecords<Blocks>().ToList();
        }
    }



    String createImage(String inputBase64) {
        return "url(data:image/png;base64," + inputBase64+")";
    }
    List<Blocks> convertRandomBlocksToBlocksList(List<RandomBlocks> randomBlockList) {
        List<Blocks> blockList = new List<Blocks>();
        foreach (var randomBlock in randomBlockList) {
            blockList.Add(randomBlock.internalBlock);
        }
        return blockList;
    }
    void recalculateBlockList() {
        blocksToPlace = new List<Blocks>();
        for(int i = 0; i < 5; i++) {
            blocksToPlace.Add(randomMachine.selectRandomBlock().internalBlock);
        }
    }

    void advanceCarrousel(KeyboardEventArgs e) {
        Console.WriteLine(e.Key);
        if(e.Key.Equals(" ") && blocksToPlace != null) {
            Blocks currentBlock = blocksToPlace[0];
            placedBlocks = placedBlocks.Prepend(currentBlock).ToList();
            blocksToPlace.RemoveAt(0);
            blocksToPlace.Add(randomMachine.selectRandomBlock().internalBlock);


        }

    }

}
